class ImageGallery extends HTMLElement {
    constructor() {
        super();
        this.attachShadow({ mode: 'open' });

        this.container = document.createElement('div');
        this.container.style.display = 'inline-block';
        this.container.style.whiteSpace = 'nowrap';
        this.container.style.height = '100%';
        this.container.style.width = '100%';

        const style = document.createElement('style');
        style.textContent = `
            div {
                display: inline-block;
                white-space: nowrap;
                height: 100%;
                overflow: hidden;
            }
            img {
                height: 100%;
                vertical-align: top;
                cursor: pointer;
            }
            .arrow {
                position: absolute;
                top: 50%;
                transform: translateY(-50%);
                background-color: rgba(0, 0, 0, 0.5);
                color: white;
                border: none;
                padding: 10px;
                cursor: pointer;
                z-index: 10;
            }
            .left-arrow {
                left: 0;
            }
            .right-arrow {
                right: 0;
            }
            .modal {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.8);
                display: flex;
                justify-content: center;
                align-items: center;
                z-index: 20;
                visibility: hidden;
                opacity: 0;
                transition: opacity 0.3s ease;
            }
            .modal.active {
                visibility: visible;
                opacity: 1;
            }
            .modal-content {
                position: relative;
                max-width: 80%;
                max-height: 90%;
                display: flex;
                align-items: center;
                justify-content: center;
            }
            .modal img {

                box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
            }
            .modal-arrow {
                position: absolute;
                top: 50%;
                transform: translateY(-50%);
                background-color: rgba(0, 0, 0, 0.5);
                color: white;
                border: none;
                padding: 10px;
                cursor: pointer;
                z-index: 30;
            }
            .modal-left-arrow {
                left: 10px;
            }
            .modal-right-arrow {
                right: 10px;
            }
        `;

        this.shadowRoot.appendChild(style);
        this.shadowRoot.appendChild(this.container);

        this.leftArrow = document.createElement('button');
        this.leftArrow.className = 'arrow left-arrow';
        this.leftArrow.textContent = '◄';
        this.leftArrow.addEventListener('click', () => this.moveLeft());

        this.rightArrow = document.createElement('button');
        this.rightArrow.className = 'arrow right-arrow';
        this.rightArrow.textContent = '►';
        this.rightArrow.addEventListener('click', () => this.moveRight());

        this.shadowRoot.appendChild(this.leftArrow);
        this.shadowRoot.appendChild(this.rightArrow);

        this.scrollSpeed = 1;
        this.scrollMagnitude = 2; // Default magnitude
        this.scrollFrequency = 25; // Default frequency (1 second)
        this.images = [];
        this.scrollInterval = null;
        this.scrollDirection = 1; // 1 for right, -1 for left
        this.currentIndex = 0; // Index of the currently displayed image in the modal

        // Modal for enlarged image
        this.modal = document.createElement('div');
        this.modal.className = 'modal';
        this.modal.addEventListener('click', (event) => {
            if (event.target === this.modal) this.hideModal();
        });

        this.modalContent = document.createElement('div');
        this.modalContent.className = 'modal-content';

        this.modalLeftArrow = document.createElement('button');
        this.modalLeftArrow.className = 'modal-arrow modal-left-arrow';
        this.modalLeftArrow.textContent = '◄';
        this.modalLeftArrow.addEventListener('click', (event) => {
            event.stopPropagation();
            this.showPreviousImage(false);
        });

        this.modalRightArrow = document.createElement('button');
        this.modalRightArrow.className = 'modal-arrow modal-right-arrow';
        this.modalRightArrow.textContent = '►';
        this.modalRightArrow.addEventListener('click', (event) => {
            event.stopPropagation();
            this.showNextImage(false);
        });

        this.modalContent.appendChild(this.modalLeftArrow);
        this.modalContent.appendChild(this.modalRightArrow);
        this.modal.appendChild(this.modalContent);
        this.shadowRoot.appendChild(this.modal);
    }

    static get observedAttributes() {
        return ['images'];
    }

    attributeChangedCallback(name, oldValue, newValue) {
        if (name === 'images') {
            this.images = JSON.parse(newValue);
            this.updateGallery();
            this.startScrolling();

            this.style.display = "block";
            this.style.height = "400px";
            this.style.position = "relative";
            this.style.overflow = "hidden";
        }
    }

    connectedCallback() {
        //this.updateGallery();
        //this.startScrolling();
    }

    disconnectedCallback() {
        this.stopScrolling();
    }

    updateGallery() {
        this.container.innerHTML = '';
        if (this.images.length === 0) return;

        // create images 
        const fragment = document.createDocumentFragment();
        this.images.forEach((url, index) => {
            const img = document.createElement('img');
            img.src = url;
            img.addEventListener('click', () => this.showModal(index)); // Event to show the image in the modal
            fragment.appendChild(img);
        });

        this.container.appendChild(fragment);
    }

    startScrolling() {
        if (this.scrollInterval) {
            clearInterval(this.scrollInterval);
        }
        this.scrollInterval = setInterval(() => this.scrollImages(), this.scrollFrequency);
    }

    stopScrolling() {
        if (this.scrollInterval) {
            clearInterval(this.scrollInterval);
        }
    }

    scrollImages() {
        const firstImage = this.container.querySelector('img');
        const firstImageWidth = firstImage.clientWidth;

        this.container.scrollLeft += this.scrollMagnitude * this.scrollDirection;

        if (this.container.scrollLeft >= firstImageWidth || this.container.scrollLeft <= -firstImageWidth) {
            firstImage.remove();
            this.container.appendChild(firstImage);
            this.container.scrollLeft = 0;
        }
    }

    moveLeft(auto=true) {
        const lastImage = this.container.querySelector('img:last-child');
        lastImage.remove();
        this.container.insertBefore(lastImage, this.container.firstChild);
        if (auto) setTimeout(() => this.startScrolling(), 1000);
    }

    moveRight(auto=true) {
        const firstImage = this.container.querySelector('img');
        firstImage.remove();
        this.container.appendChild(firstImage);
        this.container.scrollLeft = 0;
        if (auto) setTimeout(() => this.startScrolling(), 1000);
    }

    setScrollSpeed(magnitude, frequency) {
        this.scrollMagnitude = magnitude;
        this.scrollFrequency = frequency;
        this.startScrolling();
    }

    showModal(index) {
        this.stopScrolling();
        this.currentIndex = index;
        this.updateModalImage();
        this.modal.classList.add('active');
    }

    hideModal() {
        this.modal.classList.remove('active');
        this.startScrolling();
    }

    showPreviousImage(auto=true) {
        this.currentIndex = (this.currentIndex - 1 + this.images.length) % this.images.length;
        this.updateModalImage();
        this.moveLeft(auto); // Move gallery to left
    }

    showNextImage(auto=true) {
        this.currentIndex = (this.currentIndex + 1) % this.images.length;
        this.updateModalImage();
        this.moveRight(auto); // Move gallery to right
    }

    updateModalImage() {
        const img = document.createElement('img');
        img.src = this.images[this.currentIndex];
        img.alt = 'Enlarged Image';
        this.modalContent.innerHTML = '';
        this.modalContent.appendChild(this.modalLeftArrow);
        this.modalContent.appendChild(img);
        this.modalContent.appendChild(this.modalRightArrow);
    }
}

customElements.define('image-gallery', ImageGallery);
